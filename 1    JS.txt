Declaring object:

Declaring static object:
This are the object which are declared once at all and very useful for singleton pattern

1. By litral way: 
	var mangoll = {
		color: "yellow",
		​howSweetAmI: function () { console.log("Hmm Hmm Good"); }
	}
2. By Constructor way:
	var mangocc =  new Object ();
	mangocc.color = "yellow";
	mangocc.howSweetAmI = function () { console.log("Hmm Hmm Good"); }
	
In both way you can observe that you do not have any way to have template to generate more uch object.
You have to create complte new object for 'apple' again
Though you can do this too

mangoll.myFun = function() {...}

Above two is not very useful if you wants to use OOPS features in JS. 
As you can see we create the object but there is no any way to create another one with same template (apple). 

To solve this we use two approach: 
1.	Declaring by Constructor (function)
	function fruite(color, test) {
		this.color = color;
		this.test = test;
		
		this.amIYummy = function() {....}
	}
	var appleFruit = new Fruit ("red", "apple");

	
What if you try 'this' in a letral way of declaration
	var mangoll = {
		color: "yellow",
		​howSweetAmI: function () { console.log("Hmm Hmm Good"); }
		this.myFun = function() {...} 	// THis will give compilation error
	}
Though it will work fine as expected-
	var mangoll = {
		color: "yellow",
		howSweetAmI: function () { 
			this.mm = 9;
			console.log("Hmm Hmm Good", this.mm, this.color); 
		}
	}
	mangoll.howSweetAmI();
It will print -> "Hmm Hmm Good", 9, yellow

	
But it will work if created by object-
	var mangocc =  new Object ();
	mangocc.color = "yellow";
	mangocc.howSweetAmI = function () { this.nn = 4; console.log("Hmm Hmm Good", this); } // this here will denote the mangocc
	mangocc.howSweetAmI();
	console.log(mangocc.nn)	//It will work and print 4
----------------
Now lets analyze a normal methode call behaviour (No object created):

	function onlyFunction(color, test) {
		return 'mufazzal'
	}	
Now if we use 'onlyFunction' as a typical function like
var tfc = onlyFunction("yellow", "mango");
Here tfc will be 'mufazzal'. It is as simple as clean water.

But whenever a function call is happen a closure is created which will have last state of the variables inside this function, this closure later 
will be used by inner functions of 'onlyFunction'. Wee will read about this in detail into 'scope' chapter
------------

Now lets analyze constructor call behaviour (Object created):

	function onlyFunction(color, test) {
		return 'mufazzal'
	}	
	var objj = new onlyFunction("red", "apple");

When you apply 'new' keyword on methode, its behaviour will be changed dramatically.
First of all 'return' statment here will becoome redundant and not make any diffrence here.
so value of 'objj' will not be 'mufazzal'

Second whenever you call it as constructor with 'new' 2 thing created : 
1.	A new object of class 'onlyFunction'
2.	A closure of function 'onlyFunction' in which all the variable declared with 'var' lies. We will study closure in 'scope' chapter

So what is the value of 'objj'?
It will be an newly created object(with class name 'onlyFunction') with nothing in it. 

console.log(objj); >> 	'>onlyFunction {}'

Now empty object for us is of no use. We ca set some values/methode it it also either after the creation or at a time of creation 
After creation:
objj.myname = 'mufazzal';
Time of creation (in constructor):
This is vwry useful if you wants to use the oops concept. Now always remeber 
-> If you call the function with 'new' keword (as constructor) then 'this.' iside the function will point to the objet we are creating 
-> Every time we call 'new' keyword with methode name, a new object with classname as methode name will be created 
	and 'this.' inside methode name will point to that object
So if you wants to set a varibale name 'myname' for the currently in creation object then do this ->
function onlyFunction(color, test) {
	this.myname = 'mufazzal'
	return 'mufazzal'
}	

Now after the creation you can use this like below ->
 console.log(objj.myname)  >> 'mufazzal'.
 
All the thing we assign with 'this.' statement will be attached to the object and that could be used by outside the class (cusntructor methode 'onlyFunction')

	function onlyFunction(color, test) {
		this.myname = 'mufazzal'			// DEFINED Here
		this.myfun = function() {...}
	}
	objj = new onlyFunction(..)
	c.l(objj.myname);						// BUT ACCESSIBLE here
	this.myfun();

They both will be accesible here so we can say that they are accesible to outside of 'onlyFunction' and so 
Anything declare inside constructor with 'this.' will be public not private member.

Now how to declare private variable: 
if you declare variable without 'this.' then it will only be accesible at inside not outside:
	function onlyFunction(color, test) {
		this.myname = 'mufazzal'			
		var salary = '10';
	}
	objj = new onlyFunction(..)
	c.l(objj.myname);						
	c.l(this.salary);			// Undefined error will come

All the variable declare with var/let/const in the constructor function will be private only.

---------------------------------------------------

So intresting question here is cant we use 'this.' if we call the methode normally (without 'new') 
	function onlyFunction(color, test) {
		this.color = color;
		return 'mufazzal'
	}
	var tfc = onlyFunction("yellow", "mango");

So you call onlyFunction as a normal methode not with 'new' so new object wont be created so 'this.' will pont to nothing and will be undefined.
And it will give a runtime error.

Now if you have not used 'new' to create a new object its fine, you have not created a new object.
But BUT BUT can we pass an already existing object in this methode. 
suppose you have a already build up objet   var myAobj = {..}    and i wants to use this as pointed to 'this.'

Yesssss
you can 
you can pass it by 'bind' methode. 
So if you have use 'this.' in the methode and use the 'bind' all will work fine 


SO SO SO 

If a methode have a 'this.' used in it - 
You can use it for creating 'new' object as    new onlyFunction("yellow", "mango");
Or you can call it in context of existing object, if the methode is a member function like: 'myObj.myFun()'
Or you can call it as a normal methode with existing object with 'bind'
Otherwise it will give error 'this' not definned

Hiw to use bind?
Will look later
----------

Behavour of returm statment 
with 'new' keyword: 
	function onlyFunction(color, test) {  return 'mufazzal' }
	var tfc = new onlyFunction("yellow", "mango");
It will have none effect an will be igneored. 'tfc' will point to newly created object

If you call it as normal methode (with bind also if you need):
	var tfc = onlyFunction("yellow", "mango");
then tfc will be 'mufazzal'

-----------


In the methode(constructor) defination if you have not used 'this.'
Then 
either call it with 'new'		>> empty object return
Or with 'bind'					>> 'this.' is not used so binded object goes useless
Or
Call it as typical call 		>>simplest way

----------

'this' and function:
By default function does not have any 'this' attach to it. It will be attached at a time of calling not defining
if you call it with 'new' as constructor then 'this' will reprsent the object in making.
But if you call it simplay like   var ffc = onlyFunction("yellow", "mango");   then 'this' will not be reprsent anything here, it will be undefined.
And if you call in context of any objevt like   obj.onlyFunction("yellow", "mango")   then 'this' will reprsent 'obj' here,
So only when you use 'new' keyword then function will behave like a constructor and 'this.' will be reprsenting the object we are creating.

-------
What does 'this' reprsent in HTML root doc {not inside any methode or class}
e.g.  <script> console.log(this)</script>
Here 'this' will reprsent the window object

What does 'this' reprsent in any included .js file {not inside any methode or class}
EG: index.js
Ans: window

What does 'this' reprsent in any imported .js file {not inside any methode or class}
e.g.  
ff.js>>
import ..
console.log(this)
..
Here 'this' will reprsent nothing and it will be undefuned.
By default at file level (not inside methode or class)'this' is not attached to anything in any js file 
--------

To access the public property there is two way:
ob.propName
ob['propName']

incorrrect way-> ob[propName]


----------------------------

Use of 'this.' if object (not class) is declared by litral way: 
Yes you can use it like below - 
	var mangoll = {
		color: "yellow",
		​howSweetAmI: function () { console.log(this.color); }
	}
This aproch is useful if you need some kind of global variable and functions.

---------------------------------
function variable (1) VS fnction expression (2): 

	1.	var fnVar = function() {...}
	2.	function fnExp() {...}
	
1:	is avialble only after the exection is passed through this line.
2:	is avialble in the complete parant block, either declare before or after use.

	function officer () {
	  console.log( fnExp(), fnVar() );					L1
	  
	  var fnVar = function () { return "fnVar"; };		L2
	  function fnExp() { return "fnExp"; }				L3
	  
	  console.log( fnExp(), fnVar() );					L4
	}
	
So in above example, 'fnExp' will be avialble in all over the 'officer' function. from 'L1' to 'L4'
But 'fnVar' will be avialble only after 'L2'
So 
L1:		fnExp undefined
L4:		fnExp fnVar

Special case: 
	var fnVar = function fnName() {...}
In such cases 'fnName' will not be prsent and it will give error in 'red' in console. 

Example is in 'triviatuto.txt'
---------------------------
Hoisting: 
All the variable declare with 'var' at any line in function block, it will inherentaly be defined at the top:
So 
	fun() {
		console.log(x)	LL1
		var x = 5;
		console.log(x)	LL2
	}
LL1 will not give any error instead it will give output as 'undefined'
LL2 will give '5'
This is true for both type of file included one 'index.js' and imported one 'api.js'

supose you use the variable before the declaration and u declare it into the conditional block, In that case also it will not give a 'red' error
in console, insteat it will print the value as 'undefined'.
Actully whenever or wherever the variable is, in the function it will automatically defined at the top.
	
	fun() {
		console.log(x)			// this will print 'undefined', not give the error
		if(false) {
			var x = 5;		
		}
	}

What will happen if you use the variable but forget to declare: 
	fun() {
		console.log(x)
	}
It will gives an error in 'red' color in console.

	fun() {
		console.log(x)			// It will also gives an error in 'red' color in console.
		x = 5;		
	}
Bt It will Not gives an error in 'red' color in console.

	fun() {
		console.log(x)			// It will not gives an error in 'red' color in console.
		x = 5;
		var x;
	}
	
----
#REF fromES6.txt

variable declare with 'var' in the 'if/for' block, does have scope outside of that 'if/for' block
	function fun() {
		console.log(x)						//undefined
		for(..)/if(true) { var x = 5;}
		console.log(x)						//5		
	}
--
	function fun() {
		console.log(x)						//undefined
		for(..)/if(false) { var x = 5;}
		console.log(x)						//undefined		
	}
--
	function fun() {
		console.log(i)						//undefined
		for(var i = 0; i < 4; i++) { .. }
		console.log(i)						//4
	}

--
variable declare with 'var' in the 'function' block, does not have scope outside of that 'function' block
	function fun() {
		console.log(x)								// red error in console
		function inf() { var x = 5;	} inf();
		console.log(x)								// red error in console
	}
	
VVVIMP:	
	1.	'use strict' do not chnage any behaviour of hoisting.
	2.	hoisting not applicatble on variable declare with 'this.'
	3.	scope of var leak outside (before and after) of if/for block  but not out of function block
	
NOTE: 	
If you have used any variable in the js than you must must declare it somwhere may be before or after use. 
if you do not declare then :
	For imported js: It will give red error in console no matter u use 'use strict' or not 	
				[if u declare it after use that is hoisting simply! dont confuse much]
	For included js: 
		With 'use strict':
			It will throw red error in console
		Without 'use strict':
			that variable will become an global variable [part od window object]
	
	
		
			
		
------------------
use strict:
	
this feature is added in ES5 to prevent developer from doing any buggy coding: 
Its most IMP feature: 
As you know if we are in included 'index.js' file then declaring variable inside any function wihout 'var' will create the global one.
E.G. :
index.js >>
	fm = 'muf';			L12
	function() {
		fv = 'hus';		L11
	}
So fv and fm are global variable.
But this thing could be very buggy and enable developer to create many global variable.

In this file now if you add 'use strict', at the top of the file, then behavior will be changed.
Now line 'L11' and 'L12' both will give error in cosole.
if you wants to declare global var do : window.fv/fm = 'hus';
	
index.js >>
	'use strict';
	fm = 'muf';			Error in console
	function() {
		fv = 'hus';		Error in console
	}

'use strict' locally: you can put it for specific function only
index.js >>
	fm = 'muf';			worki fine
	function() {
		'use strict';
		fv = 'hus';		Error in console
	}

In imported js file there is only one way te declare global variable that is 
	window.blbvra = 'gggg';
So use strict play no role here.
	
>	'use strict' should always come at top of function/file
>	It most importantly prevent the accidental declaration of global variable
>	Today most of the JS work in 'use strict' mode.
>	If you put 'use strict' at the top of js then all the js will become 'use strict'
>	It was supported from ES5
>	Es6 and ES5 has all the code in 'use strict' mode.

Other resriction by 'use strict' :
>	Common param not allowed   	fn(p1, p1)
>	Common key not allowed 		{k1: '', k1: ''}
>	Leading 0 not allowed		var kk = 09;

	
VIMP:  'use script' + Hoisting
	'use strict';
	fm = 'muf';			No error
	function() {
		fv = 'hus';		No error
		var fv;
	}
	var fm;

In above u wont get any error, because in the later stage you declare the variable later in the code.
'use script' play major role in included js file to prevent accidental declaration of global variable

index.js without use strict: 
if any whete u just write 
x = 5
but dont write
var x = 5  .. either b4 or after above line.
it will create a global variable
and so devloper may create lot of such variable.
this is restricted by use strict

index.js with use strict:
here if u do the above.
without declaring x as
var x = null   .. either b4 or after
it will throw error

---
Strict mode applies to entire scripts or to individual functions. 
It doesn't apply to block statements enclosed in {} braces; attempting to apply it to such contexts does nothing
------------------------	

Static variable: 
You can also declare the static variable of constructor function like this: 
	function City() {...}
	City.country = 'india';
This also work with construction function as a expression:
	var City = function () {...}
	City.country = 'india';
Accessibility of static function:
	1.	with the class name : City.country	:	Yes
	2.	with the instance of that class : cityObj.country	:	No
	3.	inside the class (with or without 'this.')	:	No
	4.	inside the class with 'City.'	:	YES
	
Static function: 
	City.staFunction = function() {
		console.log('staFunction', this, this.cityname);
	}
You can also defined static function like above, but 'this.' in the static function not point to any object of 'City' 
rather some refrence to 'City' class itself, So out pot will be
	staFunction, {..wierd object..}, undefined.
You can declare static function for function variable too :
	var CityFF = function() {...}
	CityFF.staFunction = function() {
		console.log('staFunction', this, this.cityname);
	}


-------------------

typeOf operator: 
it return the string value of what kind of primitive that variable is; it could only return the one of below 6 value.
	var vv =  vaaa
	console.log(typeOf vv)
	
		vaaa		Return
	-------------------------------
		true		"boolean"
		"er"		"String"
		3			"Number"
		{..}		"Object"
		[..]		"Object"
		undefined	"undefined"
		null		"Object"
		$('header1')"Object"
		()=>{}		"function"

		
instanceof:
this is used to find if the object created with any specific constructor, it return true/false
if you have a object as-
	var per = new Person(..)
	then you can do-
	per instanceof Person  	-> true
	per instanceof Car	  	-> false
	per instanceof Object	  	-> true
It basically go down to __proto__ chain of object and see the per.__proto__.constructor/per.constructor has the exact same value or not.
Also it may be possible that in __proto__ chain multiple constructor may exist.
None of the primitive have any constructor attached to it so for all possible below cases ->
	"muf"/5/null/undefined/3.4   instanceof  Object/Number/Array/Person/String  
The return value will be false for sure.
For String	
	var ll = "muf"					ll instanceof String -> false
	var kk = new String("hus")		kk instanceof String -> true	
Becoz the first one is simplay a primitive string, the next one is a String object and so has kk.__proto__.constructor in its proto chain.
Interstingly in __proto__ chain of kk, you will also found __proto__.__proto__.__proto__.constructor = Object
So below one will also give true
	kk instanceof Object -> true	
But ll still give false 
	ll instanceof Object -> false
	{} instanceof Object -> true
Array-
	[].instanceof Array -> true
	[].instanceof Object -> true
	
properly test the string->
	typeof str === 'string' || str instanceof String

--------------------

diffrent kind of loop : 
#REF_FORIN
	for, for in, while, do while 
for..in : 
This will loop all the emurable property in the object itself and also in its __proto__ chian.
	for (var k in emp) {
		console.log(emp[k]);
	}	
This will ptint all the emurable property in 'emp' as well as all the emurable property into the __proto__ chain of 'emp'
if proprty is a function that will also get looped in it.

for..of:
	This loop is useful iterable type of object like Array, map, set.
	e.g.:
		var arr = [123, 5, 7895]
		for(let vv of arr) {...vv...}  //123, 5, 7895
	You cannnot itrate object with it. but you can get the array of key in that objevt and then itrate it: 
		for(let vv of Object.keys(obj)) {...vv- obj[vv]..}  //name- muf, ...

#REF_FI_VS_FO
for..of VS for..in:
	for..of is used for iterable item like Array, Map, Set.
		for(let v of arr/Object.keys(obj)/set.values()/map.enteries()) {....}
	for..in used for object not for iterable
		for(let v in obj) {...}
	
	for..of with object: 
		for(let v of obj) {...} // will give error 'obj[Symbol.iterator] is not a function'
	for..in with iterable-array
		for(let v in arr) {...}	// here v will be 0 1 2 3.. so the indexes of array
------------------

#REFREST_PARAM
REst params
Rest parameters are similar to variable arguments in Java. 
Rest parameters doesn’t restrict the number of values that you can pass to a function. 
Type of the parameters sent also not restricted
this arg always come to the last of the arguments in the function, and only one for each function

	function fun1(name, ...params) {  ...  }  
	fun1('muf');   fun1('muf', 5);  fun1('muf', 5, 'wwe', ['asd', 'we']); 
	
--------------

Object destrucuring :
	var emp = { name: 'John', Id: 3 } 
	var {name, Id} = emp 
This is very very useful to read the webservice response in one line

Revesrse:
	name = 'John';  Id = 3;  deep = {work: 'shop', hobb: 'de'};	
	var emp = {name, Id, deep}
----------

Equality check : 

b4 it lets see how all the things aare converted to number in JS:
conversion of somethng to a number:
	true   	>> 1
	false  	>> 0
	'muff'	>> 2343533
	'true'	>> 45345
	'false'	>> 32354
	'1'		>> 1
	'343'	>> 343
	''		>> 0
	{..}	>> 8409324649
	
	{name: 'muf'}	==/===  	{name: 'muf'}		false/false		-> becoz an object is always checked via refrence
	'muf'  			==/===  	'muf'				true/true
	2  				==/===  	2					true/true
	'2'				==/===  	'2'					true/true
	2				==/===  	'2'					true/false
	2 + ''			==/===  	'2'					true/true
	
	new String('3') ==/==		'3'					false/false
	new String('3') ==/==		new String('3')		false/false		-> becoz an object is always checked via refrence
	

	
	
loose check: ==
In loose check both the oprand will be converted to same type, it doesnt matter who is in LHS and who is in RHS:
after convesion it do the === check on converted value.	
String VS Number:	
	String will be converted to number		
											:		'2' == 2				-->>	2 === 2			true	
											:		'' == 0					-->>	0 === 0			true	
											:		'sf' == 23				-->>	4542 === 23		false	
String VS Boolean:	
	Both will be converted to number		
											:		'true' == 	true		-->>	85481 === 1		false					
											:		'false' == 	false		-->>	85483 === 0		false
											:		'1' == 		true		-->>	1 === 1			true
											:		'0' == 		false		-->>	0 === 0			true
											:		'' == 		false		-->>	0 === 0			true
											:		'45' == 	true		-->>	45 === 1		false
Number VS Boolean:	
	Boolean will be converted to number		
											:		1 == true 				-->>	1 === 1			true
											:		12 == true 				-->>	12 === 1		false
											:		0 == false 				-->>	0 === 0			true
											:		12 == false 			-->>	12 === 0		false
											
											:		null 		== '0'/0/1/'12'/''/true/false 	-->	-->		false
											:		undefined 	== '0'/0/1/'12'/''/true/false 	-->	-->		false
											:		null ==  undefined	--> true
											:		null === undefined	--> false
Object VS Anything 
	for == and === it will check the refrence not a coontent if refrence is same then only it will gice true. otherwise false always.

Comparison of two sttring always happen on content basis: (bcoz the both are also converted in reprsentative in and then compared)	
	var a = 'muf'; 
	var b = 'muf'; 
	a === b  -> true
	
	
strong check:-
	if you do the === then conversion will not occure and things are check as it is
	
		''		=== false 		false
		'zz' 	=== true 		false
		'true' 	=== true		false
-----------

if expression: 
	if(expression) { 'suc' } else { 'unsuc' }
	Or
	expression ? 'suc' : 'unsuc'
in 'if(expression)' expression is converted to the boolean if the derived value is 'false' then 'unsuc' otherwise 'suc'
see the conversion table above for conversion of anything to the boolean
	
	true   		>> true			>>	suc
	false		>> false		>>	unsuc
	'muff'		>> true			>>	suc
	'true'		>> true			>>	suc
	'false'		>> true			>>	suc
	'1'			>> true			>>	suc
	'0'			>> true			>>	suc
	'343'		>> true			>>	suc
	''			>> false		>>	unsuc
	{..}		>> true			>>	suc
	0			>> false		>>	unsuc
	1			>> true			>>	suc
	456			>> true			>>	suc
	-458		>> true			>>	suc
	-1			>> true			>>	suc
	null		>> false		>>	unsuc
	undefined	>> false		>>	unsuc
	'mu'.indexOf('hus')			>> true			>>	suc
	
if('0') alert('sf')	// this will do give alert	
--------------------

#REFSHORTCUR
Short cuircuit statement :-
	This are the series of true and false. once at any point series got the confidence of either true or false, that value will be return.
			   
			   1st	  2nd
	var mv = true  && 'muf'		// it will give 'muf' becoz first is true the AND so next has also need to check for result. and so whatever come in secone, that will be result
	var mv = false && 'muf'		// it will give false, becoz if first is false with AND then result of AND is 100% false. so need to go to second one and just return the value of first one
	var mv = true  || 'muf'		// it will give true becoz if first ir true with OR then result will surely be true. so need to go to second one and just return the value of first one
	var mv = 'hus' || 'muf'		// it will give 'hus' 
	var mv = 'hus' && 'muf'		// it will give 'muf' 
-----------


eval()
This is one of the most controversial function, it evaluate the string as javascript but it is not at all recomendded to use
Why 
Suppose you have a input box and eval it value like
	eval($('input')[0].value)
Because user now can pass malocious code in it and do hacking.
The only place where eval is very useful->
	creating a javascript online editor like jsfiddle etc.
In old days eval was used to convert string to json, but ES6 have its own JSON class.