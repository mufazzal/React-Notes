all the array object extend the 'Array' class; 
So 
[]/['2', '44']/['we', 'wew']/new Array(..)/ar.__proto__  --> Array.prototype;

Array Iterator function:-
	whenever you apply any itrating function over the array (e.g. : map, filter..), you have to pass a processing function (or callback)  
	in the second perametrer of the call. 
	This callback function will have 3 perameter be defined every time and that are: 
		1.	value:	value of element of array
		2.	index:	index of element of array
		3.	array:	array refrence
	in this tutoroal we will call this functioin as : processorFunction(value, index, array)
		this function is genrally passed as lemda expression, and many time use less then 3 formal perameter : 
		eg:
		ffff(function(element, index, array) {
			....
			<return if required>
		})
		ffff((v,i) => {..})
		ffff(v => {..})		
		ffff(v => ..)			For single line body and one param


internal structure of array: 
	1.	All the array are child of Array class, and Array.prototype = 	{...lot of util function...}.
	2.	Though you see the array exlicitaly in very simplistic way like: ['a', 'b', 'sad', {...}, 3], 
			But inside the framwork its structure is a numeric-key-as-index and value pair : 
			['0': 'a', '1': 'b', '2': 'sad', '3': {...}, '4': 3]
	3.	You can also define the key and valye pair by your own like : 
			['0': 'a', '1': 'b', '2': 'sad', '3': {...}, '4': 3, 'name': 'mus']
			OR
			arr['name'] = muf; OR arr.name = 'muf'; OR arr.slr = 100;
		all the itrable function like filter/map/foreach/every/reduce would completely ignore the non numeric key.
		if you do somthing like 
			arr[0/'0']  =  'mufazzal'
		It will change the value repsented by inde-as-key '0', so it will change the value at index 0
	
	
	
Array.prototype have following IMP functions: 
	
1.	every: this will return true if processorFunction for every elemnt return true. give false if any one of them return false
		var	ispassed = arr.every(v => v>5 ); 
		console.log(ispassed);	//false
	
		this 'processorFunction' function must return either true or false, other wise it will take default value as false.
		so be careful when you are using lemda function : 
		var	passed = arr.every(element => console.log(element) ); // it will always return false for each value.
	
2.	filter: this will apply the processorFunction and depending on the return value (true/false) it will create a new array. 
		in the created new array the indivisual value will not be changed. It will simply create a subset of 'arr' 
		created array could be of same or diffrent length.
			-	ceate a new array
			-	indivisual value remain same
			-	result.length <= arr.length
			-	expected reurn of 'processorFunction' boolean (so unmatch return will be converted to boolean)
			-	default return of 'processorFunction' 'false'
		>>	var	fArr = arr.filter(element =>  {  if(element%2===0)  return element*10  });
		output: 	[2 4 6 8 10]
	
3.	map: this will apply the processorFunction and create a new array of element which are return via return statement, if return is missing then	
			it will take value as 'undefined'
			-	ceate a new array
			-	indivisual value in new array may changed
			-	result.length === arr.length
			-	expected reurn of 'processorFunction' is anything 
			-	default return of 'processorFunction' 'undefined'
		
		>>	var	fArrret = arr.map(element =>  {if(element%2===0) return element*10});   
		output: 	[undefined, 20, undefined, 40, undefined, 60, undefined, 80, undefined, 100]


3.	forEach: This methode is very simmillar to for loop, this does not create any new array, neither its processorFunction return anything	
		it only itrate over an array.
		It shoud be used over the for loop to save the daclaration of 'i'
			-	ceate no new array
			-	expected reurn of 'processorFunction' is nothing 
		
		>>	arr.forEach((element, i) =>  { console.log(element, i);} );   
		

4.	some other imp function are: 
		reduce/reduceRight:	process the complete array from left to right(/right to left) and produce one result.
			var res = arr.reduce( (accumelator, currValue) => {
				return f(accumelator, currValue)
			}, initalValue)
		
		initalValue: intial value for accumelator
		accumelator: a transient value is result of all previous processed array element 
		currValue: the curreny array element for processing.
		
		- return vlaue of callback function is passed as accumelator.
						
5.	slice:	cut the arrau
	
	
-----------------------

for loop iteration:-
	for..in: 
		As desccribed in the '#REF_FORIN' in js.txt, for..in loop in all the key in object + protochain. 
		so you can also loop in the array, and it will give you all the key (key-as-index and normal-key) 
			arr.name = muf;
			for (var x in arr) { console.log(x:, arr[x]); }
			output:	'0': 1, '1': 2, '2': 3 ...... 'name': muf 

	Object.keys(arr): This will return array of all the key(numeric index + nonnumeric key) 
		output: [0, 1, 2 ..... name, salary]	

	simple for: 
		simple for loop itrate over only the key-as-index, so not a big deal.

	for..of:
		better way to itrate over each iteam value in array is :
			for (var x of arr) { console.log(x); }
		Here the x in the value not the index
-----

A very wierd behaviour of Array: 
	if suppose you declare a array 
		arr = ['muf', 'hus']	//arr.length = 2
	Now if you do 
		arr[5] = 'rsa'; 		//arr.length = 6
	This will be acceptable and will not throw any error, but behavoir will be very confusing, so do do avoid it at all cost.
------------

bind: if you are running the methode in the context of ant class/constructor function, than you must bind it properly, otherwise 'this.' will remain undefined
1.	with normal function:
			either bind the function itself: (most of the time)
				map/foreach/every(  (functioin() 
										{ .. this. .. }
									).bind(this)  
								)
			Or pass the binded onject in the iteratoe function (also good way to do the things easily)
				map/foreach/every(  functioin()  { .. this. .. } , 
									this/obj/{}	
								 )
2.	With es6 : 
			any ES6 function by default have 'this.' of parent attached to it. and you cannot change it by bind/call/apply so no discussion left.
			and so you never need to bind the processorFunction with 'this.' if processorFunction is defined as in Es6
			EG:
			map/foreach/every( ()=>
									{ .. this. .. }
	
---------------

Detection of array: 
	mem = [...]
	console.log(typeof mem)							->	Object  : not array because typeof do not diffrentiate between object type
	console.log(Array.isArray(mem))			->	true	: As expected
	console.log(mem instanceof Array)		->	true	: As expected	
	
	
