Mainefeast

Q.  	i want to restrict my reciver to specific broadcast. Recivers will answer to only to app with same signature.
Ans :	Use custom permission for this. now MyReceiver will answer to brodcast which are generated from app with same signeture
				<permission android:name="com.yourapp.PERMISSION"
					android:protectionLevel="signature"
						android:label="@string/permission_label"
						android:description="@string/permission_desc">
				</permission>
				...

				<receiver android:name=".MyReceiver"
					android:permission="com.yourapp.PERMISSION">
					<intent-filter>
						<action android:name="com.yourapp.ACTION" />
					</intent-filter>
				</receiver>
				
------------------------------------------------------------------------------------------------------------------------		

	android:exported ::  This a imp attribute use for all three component(ASB). 
	This will tells that is this component is available to exernal word or not.
	default is true if intent filter is prsence for thart component otherwise it is false (if component is specified by class name onle).
	its true 
		1. activity/service can only be start fron inside the app itself
		2. reciver will answer to broadcasts generated from inside the app only
------------------------------------------------------------------------------------------------------------------------



permission vs uses-permission
	<permission>		 mns defination of permission,	we are just creating an permission for resource not using it [like function definatiom]
	<uses-permission>	 mns actual use of thia permission, we are giving access to resource	[like function is ctully called]
	*
	*
	<Activity/Service/Recevier name="" Pernission="com.----.mypermission"> 							
	or   
	Context.registerRecevier(brcr, intentFilter, "com.----.mypermission", null)
		Restricting the access of component with permission so it will be invoked by other app or component only if they have this privileged permission.
		
	
	*	Android system already have lot of permission defined in its framwork like, ..SMS. ..Battery, ...Internate etc.
		so we can directly use it without defining them with <uses-permission>	
		Ex. 	 <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
	
	
	Creatimg Permission:	
		if u wants that any one android client-application can communicate with your secure-application only if client-application have some extra previlages,
		than u should create a custom permission for that secure-application and then use it at client application.
		
		EX:
		suppose i want an activity of secure-application to be protected by some permission 
		then 
		first i will have to define an permission
			<Permission name="com....perm"> 	in secure-application.manifeast
		now
			i will restrict the access of this application with this permission
			<Activity/Service/Recevier name="" Pernission="com.----.mypermission"> 	
		finally
			if i wants to use this activity in this application itself then i have to use this permission coz till now we 
			have just define the permission and protect the activity with this. 
			by using this application itself got privillage to use it.
			<Uses-Permission name="com....perm"> 	in secure-application.manifeast
		
		Now if you wants to use this activity of secure-application in client-application, then 
		client app also must have this permission 
			<Uses-Permission name="com....perm"> 	in client-application.manifeast
			
			
		*	Impose more restrictions on Permission:
				We can can impose some more restriction (in <Permission > tag) at its defination by using
				ProtectionLeval=""
				EX:
				#	Signature:	means both app must be signed with same keystore.
				#	
				
				
		
		ACtivity/Service/ContentProvider are simple here, as if we restrict them by <Permission>
		than we only need to give <uses-permission> in application tag of client-application.manifeast
		or secure-application.manifeast.
		
		but in BroadcastRecevier its tricky:	
			1.	Protect sent-broadcat-intent [from receving by malicious receiver]
				we can set specify require permission at time of sending broadcast it by
				sendBroadcast(b, "com...per");
				if any application wants there receiver to catch it then it must use this permission.
				so
				Secure-app will send broadcast:	sendBroadcast(b, "com...per");
				and 
				client-app and secure app will use this permission
				<Uses-Permission name="com....perm"> 	in client-application.manifeast and secure-application.manifeast
			2.	Protect Receiver [from malicious broadcasted-intent]
				register the recevier either by
				<Receiver name=""
				Permissin="com...per">
				or by
				Context.registerRecevier(brcr, intentFilter, "com.----.per", null)
				in Secure-Application
				Then only those sent-broadcat-intent will be processed by this recevier which are generated by 
				the application with this permission so
				client-app and secure app will use this permission
				<Uses-Permission name="com....perm"> 	in client-application.manifeast and secure-application.manifeast
				
			This are two diffrent scenario.
			at at time one of them or both of them may be possible
				

		
Actully whenever you fire an intent in the device, it will fall down on all the manifest (which is like door of aplicaion) of installed app.
It may be for A/S/B/C
But this fired intent can be malicious and your application dont have to answer it even intent-filter pass it
So how would you do it
Simpaly in your secure-app use the permission framwork
First declare the permission 
than use it for itself
Now you may want to use this security safguard in selected component(A/S/B/C) of your secre-app, so whatever component you wants to secure, 
just add permssion in thay component's XML declaration.  
Now distribute this permission to clients and tell them to use it in there own apps manifest
So next time if any app fire the match intent it will chech if client-app who fired it has tha permission or not,
If no ignore 
if yes pass it

Now A/S/B can be registered into the manifest only but Brdcstrcvr cab be declare at runtime also so at this time how do we impose restriction on this :
Context.registerRecevier(brcr, intentFilter, "com.----.per", null)
"com.----.per" : This is the permission client app must have

VIMP:	
	Permission is the property of application itself not a Intent.
	there is no methode like intent.setPermission(...) at all	


When you startActivity() or startservice(), Your access leval of clientapp is decided  by the manifest only, but in case of 
Brdcstrcvr it can be given at runtime also



	
		
		