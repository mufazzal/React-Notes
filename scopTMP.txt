
Nested function and closure: 
One of the most imp role closure play is in nested function.

First we will see behavior of 'this.' and 'var' 

function CityFun() {
		this.cityName = 'Barnagar';
		var cityPop = 50000;
		
		this.homeFun = function () {
			this.homeName = 'Piplu';
			console.log(this, this.homeName, cityPop);											//cons 1
		}
	}

	var cityObj = CityFun();
	cityObj.homeFun();

NOw if you see it closely, we are calling the 'homeFun()' in context of 'cityObj' which is instance of 'CityFun'.
its a direct member function of 'CityFun' class. 
So all the things declare in class 'CityFun' either public (by this.) or private (by var) will be avialable in function 'homeFun'.
and the context will be of calling object of 'CityFun' class 'cityObj'.
Also 'homeFun' is inner function of 'CityFun', this is also a reason that all the variable declare with 'var' in the 'CityFun' 
will be accssible in 'homeFun' 

Now observe that 'homeFun' is called in the context of 'cityObj'. so 'this.' inside the 'homeFun' will point to 'cityObj'
everthing inside 'homeFun' with 'this.' will point to 'cityObj'. so if you make any chage via 'this.' it will reflect onto 'cityObj'
So after you call 'homeFun', 'cityObj.homeName' will be 'Piplu'

All thing are straightforward till this point
Now we will do the third level nesting of fuction 

lets say we have a function name 'room' inside the 'homeFun' function.


	function CityFun() {
		this.cityName = 'Barnagar';
		var cityPop = 50000;
		
		this.homeFun = function () {
			this.homeName = 'Piplu';
			console.log(this, this.homeName, cityPop);											//cons 1
			
			var room = function() {
				
			}
			
		}
	}
	var cityObj = CityFun();
	cityObj.homeFun();
	



---------------------------------

variable declaration inside inner function: 
First we will see the variable declare inside immidiate inner function of constructor function -
If we declare any 

	function CityFun() {
	
		this.homeFun = function () {
			this.homeName = 'Piplu';
			var member = 9;
		}
	}
	var cityObj = CityFun();
	cityObj.homeFun();
	
Now observe that 'homeFun' is called in the context of 'cityObj'. so 'this.' inside the 'homeFun' will point to 'cityObj'.
So here any new variable you declare with 'this.' will be added into the 'cityObj' itself.
But any variable declared inside 'homeFun' with keword 'var' will not be added into the 'cityObj', instead its scope remain confined into 
the methode 'homeFun' it is declared into.
So you can also say that private variable (member) cannot in declared inside the function (homeFun) of class (CityFun)